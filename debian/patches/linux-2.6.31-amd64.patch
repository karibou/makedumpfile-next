Add support for amd64 on 2.6.31

Patch by Ken'ichi Ohmichi to support 2.6.31 on amd64 (kernel memory
layout changed)

http://sourceforge.net/tracker/index.php?func=detail&aid=2819382&group_id=178938&atid=887141

diff -rpuN a/makedumpfile.h b/makedumpfile.h
--- a/makedumpfile.h	2009-07-08 16:22:16.000000000 +0900
+++ b/makedumpfile.h	2009-07-08 16:23:00.000000000 +0900
@@ -450,6 +450,7 @@ do { \
 #define LATEST_VERSION		(0x0206001d)	/* linux-2.6.29 */
 #define VERSION_LINUX_2_6_26	(0x0206001a)	/* linux-2.6.26 */
 #define VERSION_LINUX_2_6_27	(0x0206001b)	/* linux-2.6.27 */
+#define VERSION_LINUX_2_6_31	(0x0206001f)	/* linux-2.6.31 */
 
 /*
  * vmcoreinfo in /proc/vmcore
@@ -502,6 +503,10 @@ do { \
  * The value of dependence on machine
  */
 #define PAGE_OFFSET		(info->page_offset)
+#define VMALLOC_START		(info->vmalloc_start)
+#define VMALLOC_END		(info->vmalloc_end)
+#define VMEMMAP_START		(info->vmemmap_start)
+#define VMEMMAP_END		(info->vmemmap_end)
 
 #ifdef __x86__
 #define __PAGE_OFFSET		(0xc0000000)
@@ -537,10 +542,16 @@ do { \
 #ifdef __x86_64__
 #define __PAGE_OFFSET_ORIG	(0xffff810000000000) /* linux-2.6.26, or former */
 #define __PAGE_OFFSET_2_6_27	(0xffff880000000000) /* linux-2.6.27, or later */
-#define VMALLOC_START		(0xffffc20000000000)
-#define VMALLOC_END		(0xffffe1ffffffffff)
-#define VMEMMAP_START		(0xffffe20000000000)
-#define VMEMMAP_END		(0xffffe2ffffffffff)
+
+#define VMALLOC_START_ORIG	(0xffffc20000000000) /* linux-2.6.30, or former */
+#define VMALLOC_START_2_6_31	(0xffffc90000000000) /* linux-2.6.31, or later */
+#define VMALLOC_END_ORIG	(0xffffe1ffffffffff) /* linux-2.6.30, or former */
+#define VMALLOC_END_2_6_31	(0xffffe8ffffffffff) /* linux-2.6.31, or later */
+
+#define VMEMMAP_START_ORIG	(0xffffe20000000000) /* linux-2.6.30, or former */
+#define VMEMMAP_START_2_6_31	(0xffffea0000000000) /* linux-2.6.31, or later */
+#define VMEMMAP_END_ORIG	(0xffffe2ffffffffff) /* linux-2.6.30, or former */
+#define VMEMMAP_END_2_6_31	(0xffffeaffffffffff) /* linux-2.6.31, or later */
 
 #define __START_KERNEL_map	(0xffffffff80000000)
 #define MODULES_VADDR		(0xffffffff88000000)
@@ -549,6 +560,7 @@ do { \
 #define _SECTION_SIZE_BITS	(27)
 #define _MAX_PHYSMEM_BITS_ORIG		(40)
 #define _MAX_PHYSMEM_BITS_2_6_26	(44)
+#define _MAX_PHYSMEM_BITS_2_6_31	(46)
 
 /*
  * 4 Levels paging
@@ -787,6 +799,9 @@ struct DumpInfo {
 	unsigned long	phys_base;
 	unsigned long   kernel_start;
 	unsigned long   vmalloc_start;
+	unsigned long   vmalloc_end;
+	unsigned long	vmemmap_start;
+	unsigned long	vmemmap_end;
 
 	/*
 	 * diskdimp info:
diff -rpuN a/x86_64.c b/x86_64.c
--- a/x86_64.c	2009-07-08 16:22:16.000000000 +0900
+++ b/x86_64.c	2009-07-08 16:23:00.000000000 +0900
@@ -70,14 +70,27 @@ get_versiondep_info_x86_64(void)
 	 */
 	if (info->kernel_version < VERSION_LINUX_2_6_26)
 		info->max_physmem_bits  = _MAX_PHYSMEM_BITS_ORIG;
-	else
+	else if (info->kernel_version < VERSION_LINUX_2_6_31)
 		info->max_physmem_bits  = _MAX_PHYSMEM_BITS_2_6_26;
+	else
+		info->max_physmem_bits  = _MAX_PHYSMEM_BITS_2_6_31;
 
 	if (info->kernel_version < VERSION_LINUX_2_6_27)
 		info->page_offset = __PAGE_OFFSET_ORIG;
 	else
 		info->page_offset = __PAGE_OFFSET_2_6_27;
 
+	if (info->kernel_version < VERSION_LINUX_2_6_31) {
+		info->vmalloc_start = VMALLOC_START_ORIG;
+		info->vmalloc_end   = VMALLOC_END_ORIG;
+		info->vmemmap_start = VMEMMAP_START_ORIG;
+		info->vmemmap_end   = VMEMMAP_END_ORIG;
+	} else {
+		info->vmalloc_start = VMALLOC_START_2_6_31;
+		info->vmalloc_end   = VMALLOC_END_2_6_31;
+		info->vmemmap_start = VMEMMAP_START_2_6_31;
+		info->vmemmap_end   = VMEMMAP_END_2_6_31;
+	}
 	return TRUE;
 }
 
